{"version":3,"sources":["decentracar/util/actor.ts","decentracar/messages/index.ts","imgs/driver.png","imgs/rider.png","decentracar/util/appcommunity.ts","decentracar/simulation.ts","App.tsx","serviceWorker.ts","index.tsx","decentracar/driver/index.ts","decentracar/company/service.ts","decentracar/rider/index.ts","../node_modules/tupelo-wasm-sdk/lib/js/go sync","decentracar/util/vector.ts","decentracar/util/emittinglogger.ts","decentracar/util/locations.ts"],"names":["log","debug","SimpleSyncher","name","queue","started","this","undefined","queuedFn","pop","fn","toString","resp","res","rej","length","run","Promise","resolve","reject","push","messageType","certificationTopic","ridersTopic","serialize","msg","dagCBOR","util","deserialize","bits","module","exports","_appPromise","Simulation","opts","drivers","riders","interval","community","tickCount","riderProbability","i","driverCount","Driver","location","randomGeo","mapCenter","clearInterval","EcdsaKey","generate","key","ChainTree","newEmptyTree","blockservice","tree","id","Error","service","DecentraCarService","did","start","tick","possiblyCreateRider","emit","Math","random","r","Rider","once","index","indexOf","splice","milliseconds","setInterval","EventEmitter","subDirectory","window","pathname","console","Go","setWasmPath","position","driverPng","require","riderPng","driverIcon","Icon","iconUrl","iconRetinaUrl","iconSize","Point","className","riderIcon","DriverMarker","driver","Marker","y","x","icon","Popup","acceptedRider","Tooltip","RiderMarker","rider","SimulationDisplay","simulation","logs","markers","d","Column","size","Map","zoom","center","TileLayer","url","attribution","LayerGroup","LogDisplay","txt","Item","src","App","useState","setSimulation","appLogs","setAppLogs","setTick","handleStart","a","sim","process","Community","getDefault","c","freshLocalTestCommunity","on","num","tickEvery","logStrings","unshift","join","onClick","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","emittingLogger","velocity","acceleration","wandering","riderLocation","destination","offering","hasRider","registered","messenger","startPromise","syncher","Vector","faker","findName","CommunityMessenger","Buffer","from","node","pubsub","subscribe","handleSelfMessages","bind","handleRidersMessage","registerAsDriver","playTransactions","setDataTransaction","nextUpdate","publish","type","didRegistration","env","getFrom_asU8","offer","driverDid","driverLocation","getPayload_asU8","offerReject","offerAccept","typedMsg","riderDid","send","dist","follow","dropoff","wander","riding","update","rotate","PI","add","target","arrive","dest","copy","sub","setMag","applyForce","limit","MAX_FORCE","f","mag","mul","_findOrCreateTree","handleRegistration","tryCount","getTip","tip","setTimeout","handleNew","CID","store","split","value","isCID","stopped","acceptedDriver","offers","subFn","firstOfferTick","registerAsRider","unsubscribe","askForRide","possiblyAcceptRide","stop","closest","closestDist","acceptRide","rejectRide","rideOffer","rideRequest","riderDID","webpackEmptyContext","req","e","code","keys","v","s","sqrt","div","atan2","m","angle","cos","sin","setAngle","l","amt","dx","dy","EmittingLogger","debugger","args","radius","y0","x0","rd","u","w","t"],"mappings":"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","file":"static/js/main.9e3cef37.chunk.js","sourcesContent":["import debug from 'debug'\n\nconst log = debug(\"util:syncher\")\n\ninterface queuedFunction {\n    fn:Function\n    res:Function\n    rej:Function\n}\n\n/**\n * SimpleActor is used to serialize function calls, it is a single threaded\n * actor that does one function after the next. Every send returns a promise\n * that is executed after the serialization\n */\nexport class SimpleSyncher {\n    private queue:queuedFunction[]\n    private started:boolean\n    private name?:string\n    constructor(name?:string) {\n        this.started = false\n        this.queue = []\n        this.name = name\n    }\n\n    private async run() {\n        const queuedFn = this.queue.pop()\n        if (queuedFn === undefined) {\n            log(this.name, ' stopping syncher')\n            this.started = false\n            return\n        }\n        try {\n            log(this.name, ' run fn', queuedFn.fn.toString())\n            const resp = await queuedFn.fn()\n            log(this.name, ' finish fn')\n            queuedFn.res(resp)\n        } catch(err) {\n            log(this.name, ' rejecting: ', err)\n            queuedFn.rej(err)\n        }\n        if (this.queue.length > 0) {\n            log(this.name, \"syncher queueing another\")\n            this.run()\n        } else {\n            this.started = false\n        }\n    }\n\n    send(fn:Function) {\n        const p = new Promise((resolve,reject) => {\n            this.queue.push({\n                fn:fn,\n                res: resolve,\n                rej:reject,\n            })\n            if (!this.started) {\n                log(this.name, \" not started, starting\")\n                this.started = true\n                this.run()\n                return\n            }\n            log(this.name, ' run already started')\n        })\n       \n        return p\n    }\n\n\n}","/// <reference path=\"../../@types/ipld-dag-cbor/index.d.ts\" />\n/* eslint-disable */\n\nimport dagCBOR from 'ipld-dag-cbor'\n\n/**\n * These would probably be better served as protobufs, but for demo purposes, I think it's clearer to just use Plain Old Javascript Objects\n */\n\nexport const certificationTopic = 'decentracar-certifications'\nexport const driverLocationTopic = 'decentracar-drivers'\nexport const ridersTopic = 'decentracar-riders'\n\nexport enum messageType {\n    offer,\n    offerReject,\n    offerAccept,\n    didRegistration,\n    rideRequest,\n    rideRequestResponse,\n    riding,\n    dropoff,\n}\n\n\n    export function serialize(msg:any):Uint8Array{\n        return dagCBOR.util.serialize(msg)\n    }\n\n    export function deserialize(bits:Uint8Array):any{\n        return dagCBOR.util.deserialize(bits)\n    }\n\n    export interface dcMessage {\n        type:messageType\n    }\n \n    export interface offer extends dcMessage {\n        type: messageType.offer\n        driverDid: string\n        driverLocation: [number,number]\n    }\n\n    export interface didRegistration extends dcMessage {\n        type: messageType.didRegistration\n        did:string\n    }\n\n    export interface rideRequest extends dcMessage {\n        type: messageType.rideRequest\n        riderDID:string\n        location:[number,number]\n    }\n\n    export interface rideRequestResponse extends dcMessage {\n        type: messageType.rideRequestResponse\n        driverDID:string\n        location:[number,number]\n    }\n\n    export interface offerReject extends dcMessage {\n        type: messageType.offerReject\n        offer: offer\n    }\n\n    export interface offerAccept extends dcMessage {\n        type: messageType.offerAccept\n        riderDid: string\n        location:[number,number]\n        destination:[number,number]\n    }\n\n    export interface riding extends dcMessage {\n        type: messageType.riding\n        driverDid: string\n        location: [number,number]\n    }\n\n    export interface dropoff extends dcMessage {\n        type: messageType.dropoff,\n        driverDid: string\n    }\n","module.exports = __webpack_public_path__ + \"static/media/driver.511e2960.png\";","module.exports = __webpack_public_path__ + \"static/media/rider.23486b95.png\";","\nimport { Community } from 'tupelo-wasm-sdk';\nimport debug from 'debug';\n\nconst log = debug(\"appcommunity\")\n\nlet _appPromise: Promise<Community>\n\nexport function getAppCommunity(): Promise<Community> {\n    log(\"getAppCommunity\")\n    if (_appPromise !== undefined) {\n        return _appPromise\n    }\n    _appPromise = new Promise(async (resolve, reject) => {\n        let c: Community\n        switch (process.env.NODE_ENV) {\n            case 'production':\n                log('using production community')\n                c = await Community.getDefault()\n                break;\n            default:\n                log('using development community')\n                c = await Community.freshLocalTestCommunity()\n        }\n        resolve(c)\n    })\n    return _appPromise\n}\n","import { Driver } from './driver'\nimport { Community, EcdsaKey, ChainTree } from 'tupelo-wasm-sdk'\nimport { randomGeo, mapCenter } from './util/locations'\nimport { EventEmitter } from 'events'\nimport { DecentraCarService } from './company/service'\nimport { Rider } from './rider'\nimport debug from 'debug'\n\nconst log = debug(\"decentracar:simulation\")\n\ninterface ISimulationOpts {\n    driverCount: number\n    riderProbability: number // how many ticks out of 100 will a rider be created?\n    community: Promise<Community>\n}\n\nexport class Simulation extends EventEmitter {\n    drivers: Driver[]\n    riders: Rider[]\n    private interval?: number\n    community: Promise<Community>\n    tickCount: number\n    riderProbability:number\n\n    constructor(opts: ISimulationOpts) {\n        super()\n        this.tickCount = 0;\n        this.community = opts.community\n        let drivers: Driver[] = []\n        for (let i = 0; i < opts.driverCount; i++) {\n            drivers[i] = new Driver({\n                community: opts.community,\n                location: randomGeo(mapCenter, 5000)\n            })\n        }\n        this.riderProbability = opts.riderProbability\n        this.drivers = drivers\n        this.riders = []\n    }\n\n    stop() {\n        log('simulation stopped')\n        if (this.interval === undefined) {\n            return\n        }\n        clearInterval(this.interval)\n    }\n\n    async start() {\n        log('starting simulation')\n        const community = await this.community\n        let key = await EcdsaKey.generate()\n        let tree = await ChainTree.newEmptyTree(community.blockservice, key)\n        const id = await tree.id()\n        if (id === null) {\n            throw new Error(\"unknown tree id\")\n        }\n\n        const service = new DecentraCarService({\n            community: community,\n            key: key,\n            did: id,\n        })\n        await service.start()\n        for (let d of this.drivers) {\n            d.start()\n        }\n       \n    }\n\n    async tick() {\n        for (let d of this.drivers) {\n            d.tick()\n        }\n        this.possiblyCreateRider()\n        for (let r of this.riders) {\n            r.tick()\n        }\n        this.tickCount++\n        this.emit('tick', this.tickCount);\n    }\n\n    async possiblyCreateRider() {\n        if (this.tickCount < 5) {\n            return // don't do anything until 5 ticks have passed\n        }\n        if (Math.random() * 100 < this.riderProbability) {\n            const r = new Rider({\n                community: this.community,\n                location: randomGeo(mapCenter, 5000)\n            })\n            r.start()\n            r.once('stopped', ()=> {\n                let index = this.riders.indexOf(r)\n                this.riders.splice(index, 1)\n            })\n            this.riders.push(r)\n        }\n    }\n\n    async tickEvery(milliseconds:number) {\n        setInterval(()=> {\n            this.tick()\n        }, milliseconds)\n    }\n\n}","import React, { useState } from 'react';\nimport 'react-bulma-components/dist/react-bulma-components.min.css';\nimport './App.css';\nimport { Map, Marker, Popup, TileLayer, Tooltip, LayerGroup } from 'react-leaflet';\nimport { getAppCommunity } from './decentracar/util/appcommunity';\nimport { Simulation } from './decentracar/simulation'\nimport { Icon, Point } from 'leaflet'\nimport { Driver } from './decentracar/driver';\nimport { Rider } from './decentracar/rider';\nimport { Container, Button, Columns, Navbar, Content, Box, Media, Image } from 'react-bulma-components';\nimport {logs} from './decentracar/util/emittinglogger';\n\nimport 'tupelo-wasm-sdk' // in order to get the Go global\n\ndeclare const Go: any;\n\nconst subDirectory = window.location.pathname\nconsole.log(\"subDirectory \", subDirectory)\n\nif (subDirectory !== '/') {\n    console.log(\"setting wasmpath to: \",  subDirectory + \"tupelo.wasm\")\n    Go.setWasmPath(subDirectory + \"tupelo.wasm\");\n}\n\nconst position: [number, number] = [52.491362, 13.362029];\n\nconst driverPng:any = require('./imgs/driver.png')\nconst riderPng:any = require('./imgs/rider.png')\n\nconst driverIcon = new Icon({\n  iconUrl: driverPng,\n  iconRetinaUrl: driverPng,\n  iconSize: new Point(30, 30),\n  className: 'leaflet-div-icon'\n});\n\nconst riderIcon = new Icon({\n  iconUrl: riderPng,\n  iconRetinaUrl: riderPng,\n  iconSize: new Point(30, 30),\n  className: 'leaflet-div-icon'\n})\n\nconst DriverMarker = ({ driver }: { driver: Driver }) => {\n  return (\n    <Marker position={[driver.location.y, driver.location.x]} icon={driverIcon}>\n      <Popup>\n        A Driver: {driver.name}\n        Accepted Rider: {driver.acceptedRider}\n      </Popup>\n      <Tooltip>{driver.name}</Tooltip>\n    </Marker>\n  )\n}\n\nconst RiderMarker = ({ rider }: { rider: Rider }) => {\n  return (\n    <Marker position={[rider.location.y, rider.location.x]} icon={riderIcon}>\n      <Popup>A Rider: {rider.name}</Popup>\n      <Tooltip>{rider.name}</Tooltip>\n    </Marker>\n  )\n}\n\nconst SimulationDisplay = ({ simulation, logs }: { simulation: Simulation, logs:JSX.Element[] }) => {\n  let markers: JSX.Element[] = []\n  for (let d of simulation.drivers) {\n    markers.push(<DriverMarker key={d.name} driver={d} />)\n  }\n\n  for (let r of simulation.riders) {\n    markers.push(<RiderMarker key={r.name} rider={r} />)\n  }\n\n\n  return (\n    <Columns>\n      <Columns.Column size={\"half\"}>\n        <Map zoom={12} center={position}>\n          <TileLayer\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            attribution=\"&copy; <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n          />\n          <LayerGroup>\n            {markers}\n          </LayerGroup>\n        </Map>\n      </Columns.Column>\n      <Columns.Column>\n        <Content className=\"app-logs\">\n          <h2>Events</h2>\n          <div>\n            {logs}\n          </div>\n        </Content>\n      </Columns.Column>\n    </Columns>\n  )\n}\n\n\nconst LogDisplay = ({txt,icon}:{txt:string,icon:any}) => {\n  return (\n    <Box key={txt}>\n      <Media>\n        <Media.Item>\n         <Image size={32} src={icon}></Image>\n        </Media.Item>\n        <Media.Item>\n          <Content>\n          <p>{txt}</p>\n          </Content>\n        </Media.Item>\n      </Media>\n    </Box>\n  )\n}\n\nconst App: React.FC = () => {\n\n  const [simulation, setSimulation] = useState(null as null | Simulation)\n  const [appLogs, setAppLogs] = useState([] as JSX.Element[])\n  const [tick, setTick] = useState(0)\n\n  const handleStart = async () => {\n    const sim = new Simulation({\n      community: getAppCommunity(),\n      driverCount: 10,\n      riderProbability: 5,\n    })\n\n    sim.on('tick', (num) => {\n      setTick(num)\n    })\n    sim.start()\n    sim.tickEvery(1000)\n    \n    logs.on('decentracar:driver', (...logStrings:any[]) => {\n      appLogs.unshift(<LogDisplay icon={driverPng} txt={logStrings.join(' ')}/>)\n      setAppLogs(appLogs)\n    })\n\n    logs.on('decentracar:rider', (...logStrings:any[]) => {\n      appLogs.unshift(<LogDisplay icon={riderPng} txt={logStrings.join(' ')}/>)\n      setAppLogs(appLogs)\n    })\n\n    setSimulation(sim)\n  }\n\n  return (\n    <div>\n      <Container>\n        <Navbar>\n          <Navbar.Item>Decentracar Simulation</Navbar.Item>\n          <Navbar.Item>tick: {tick}</Navbar.Item>\n        </Navbar>\n        {simulation ? <SimulationDisplay simulation={simulation} logs={appLogs} /> :\n          <Content>\n            <p>This is a simulation of a simplified decentralized car sharing app, a technical overview is available.</p>\n            <p><Button onClick={handleStart}>Click here to start</Button></p>\n          </Content>\n        }\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { EcdsaKey, ChainTree, Community, CommunityMessenger, setDataTransaction } from 'tupelo-wasm-sdk';\nimport faker from 'faker';\nimport Vector from '../util/vector'\nimport { EventEmitter } from 'events';\nimport { Envelope } from 'tupelo-messages';\nimport { certificationTopic, ridersTopic, messageType, serialize, dropoff, riding, deserialize, offer, dcMessage, offerAccept, didRegistration } from '../messages';\nimport { SimpleSyncher } from '../util/actor';\nimport {emittingLogger} from \"../util/emittinglogger\";\n\nconst log = emittingLogger('decentracar:driver')\n\nconst MAX_SPEED = .001,\n    MIN_SPEED = .000016,\n    MAX_FORCE = .0001,\n    ARRIVAL_DIST = .002\n\ninterface IDriverOpts {\n    community: Promise<Community>\n    location: Vector\n}\n\nexport class Driver extends EventEmitter {\n    community: Promise<Community>\n    tree?: ChainTree\n    key?: EcdsaKey\n    id?: string\n    name: string\n    location: Vector\n    velocity: Vector\n    acceleration: Vector\n    wandering: Vector\n\n    riderLocation?: Vector\n    acceptedRider?: string\n    destination?: Vector\n    offering: boolean\n    hasRider:boolean\n    registered: boolean\n\n    private messenger?: CommunityMessenger\n    private startPromise?: Promise<Driver>\n    private syncher:SimpleSyncher\n\n    constructor(opts: IDriverOpts) {\n        super();\n        this.community = opts.community;\n        this.location = opts.location;\n        this.velocity = new Vector(0, 0);\n        this.acceleration = new Vector(0, 0);\n        this.wandering = new Vector(Math.random() / 1000, Math.random() / 1000);\n        this.name = faker.name.findName();\n        this.registered = false;\n        this.offering = false;\n        this.hasRider = false;\n        this.syncher = new SimpleSyncher();\n    }\n\n    start() {\n        if (this.startPromise !== undefined) {\n            return this.startPromise\n        }\n        this.startPromise = new Promise(async (resolve, reject) => {\n            const community = await this.community\n            this.key = await EcdsaKey.generate()\n            this.tree = await ChainTree.newEmptyTree(community.blockservice, this.key)\n            const id = await this.tree.id()\n            if (id === null) {\n                reject(new Error(\"error getting id\"))\n                return\n            }\n            this.id = id\n            this.messenger = new CommunityMessenger(\"integrationtest\", 32, this.key, Buffer.from(this.id, 'utf8'), community.node.pubsub)\n            this.messenger.subscribe(this.id, this.handleSelfMessages.bind(this))\n            this.messenger.subscribe(ridersTopic, this.handleRidersMessage.bind(this))\n            await this.registerAsDriver()\n            // log(this.name, \" starting at \", this.location)\n            resolve(this)\n        })\n        return this.startPromise\n    }\n\n    async registerAsDriver() {\n        log(this.name, \" registering as driver\")\n        if (this.messenger === undefined || this.tree === undefined) {\n            throw new Error(\"need a tree and messenger to registerAsDriver\")\n        }\n        const c = await this.community\n        await c.playTransactions(this.tree, [setDataTransaction(\"_decentracar/type\", \"driver\")])\n        await c.nextUpdate()\n        this.messenger.publish(certificationTopic, serialize({\n            type: messageType.didRegistration,\n            did: this.id,\n        } as didRegistration))\n    }\n\n    async handleRidersMessage(env: Envelope) {\n        if (this.offering) {\n            return // ignore other messages for now\n        }\n        if (this.messenger === undefined || this.tree === undefined || this.id === undefined) {\n            throw new Error(\"need an id, tree and messenger to registerAsDriver\")\n        }\n        // TODO: make a decision if the car should offer or not\n        this.offering = true\n        const c = await this.community\n        await c.playTransactions(this.tree, [setDataTransaction(\"_decentracar/offering\", Buffer.from(env.getFrom_asU8()).toString())])\n        log(this.name, \" offering a ride\")\n\n        this.messenger.publish(Buffer.from(env.getFrom_asU8()).toString(), serialize({\n            type: messageType.offer,\n            driverDid: this.id,\n            driverLocation: [this.location.x, this.location.y],\n        } as offer))\n    }\n\n    async handleSelfMessages(env: Envelope) {\n        if (this.messenger === undefined || this.tree === undefined || this.id === undefined) {\n            throw new Error(\"need an id, tree and messenger to handleSelfMessages\")\n        }\n        const msg: dcMessage = deserialize(env.getPayload_asU8())\n        switch (msg.type) {\n            case messageType.didRegistration:\n                this.registered = true // for now, for real we'd have to check this\n                log(this.name, \" registered\")\n                break;\n            case messageType.offerReject:\n                // log(this.name, \" offer rejected by rider\")\n                // TODO: check if this is a valid offer, and was sent by us and we still care about it\n                this.riderLocation = undefined\n                this.acceptedRider = undefined\n                this.offering = false\n                break;\n            case messageType.offerAccept:\n                const typedMsg = msg as offerAccept\n                log(this.name, \" offer accepted by rider\")\n                //TODO: check if this is a valid accept\n                this.acceptedRider = typedMsg.riderDid\n                this.riderLocation = new Vector(typedMsg.location[0], typedMsg.location[1])\n                this.destination = new Vector(typedMsg.destination[0], typedMsg.destination[1])\n                const c = await this.community\n                this.syncher.send(()=> {\n                    if (this.tree === undefined) {\n                        throw new Error(\"undefined tree\")\n                    }\n                    c.playTransactions(this.tree, [setDataTransaction(\"/_decentracar/accepted\", typedMsg.riderDid)])\n                })\n                break;\n        }\n    }\n\n    async tick() {\n        await this.start()\n        // do all the calculations\n        if (this.riderLocation !== undefined && !this.hasRider) {\n            let d = this.riderLocation.dist(this.location);\n            if (d < ARRIVAL_DIST) {\n                log(this.name, \" arrived at passenger\")\n                this.hasRider = true\n            }\n            // log(this.name, \" moving to rider @ \", this.riderLocation, \" (distance: \", d, \")\")\n            this.follow(this.riderLocation, ARRIVAL_DIST) //TODO: not sure what the arrival number should be\n        } else if (this.hasRider && this.destination) {\n            if (!this.acceptedRider || !this.messenger) {\n                throw new Error(\"error must have accepted rider if dropping someone off\")\n            }\n            let d = this.destination.dist(this.location);\n            // log(this.name, \" driving rider to \", this.destination, \" (distance: \", d, \")\")\n            if (d < ARRIVAL_DIST) {\n                log(this.name, \" arrived at destination\")\n                this.hasRider = false\n                this.riderLocation = undefined\n                const c = await this.community\n                await this.syncher.send(()=> {\n                    if (this.tree === undefined) {\n                        throw new Error(\"undefined tree\")\n                    }\n                    return c.playTransactions(this.tree, [\n                        setDataTransaction(\"/_decentracar/offering\", null),\n                        setDataTransaction(\"/_decentracar/accepted\", null),\n                    ])\n                })\n                this.messenger.publish(this.acceptedRider, serialize({\n                    type: messageType.dropoff,\n                    driverDid: this.id,\n                } as dropoff))\n\n                this.acceptedRider = undefined\n                this.offering = false\n\n                this.wander()\n            } else {\n                this.messenger.publish(this.acceptedRider, serialize({\n                    type: messageType.riding,\n                    driverDid: this.id,\n                    location: [this.location.x, this.location.y],\n                } as riding))\n                this.follow(this.destination, ARRIVAL_DIST) //TODO: not sure what the arrival number should be\n            }\n           \n\n        } else {\n            this.emit('wandering')\n            this.wander() // for now just wander\n        }\n\n        this.update()\n    }\n\n    wander() {\n        if (Math.random() < .05) {\n            this.wandering.rotate(Math.PI * 2 * Math.random());\n        }\n        // log(this.name, \" wandering @ \", this.location)\n        this.velocity.add(this.wandering);\n    }\n\n    follow(target: Vector, arrive: number) {\n        var dest = target.copy().sub(this.location);\n        var d = target.dist(this.location);\n\n        if (d < arrive) {\n            dest.setMag(d / arrive * MAX_SPEED);\n        } else {\n            dest.setMag(MAX_SPEED);\n        }\n\n        \n\n        this.applyForce(dest.limit(MAX_FORCE * 2));\n    }\n\n    // boundaries() {\n    //     if (this.location.x < minLong)\n    //         this.applyForce(new Vector(MAX_FORCE * 3, 0));\n\n    //     if (this.location.x > maxLong)\n    //         this.applyForce(new Vector(MAX_FORCE * 3, 0));\n\n    //     if (this.location.y < minLat)\n    //         this.applyForce(new Vector(0, MAX_FORCE * 3));\n\n    //     if (this.location.y > maxLat)\n    //         this.applyForce(new Vector(0, -MAX_FORCE * 3));\n    // }\n\n    applyForce(f: Vector) {\n        this.acceleration.add(f);\n    }\n\n    update() {\n        this.velocity.add(this.acceleration);\n        this.velocity.limit(MAX_SPEED);\n        if (this.velocity.mag() < MIN_SPEED) {\n            this.velocity.setMag(MIN_SPEED);\n        }\n        this.location.add(this.velocity);\n\n        // reset acceleration\n        this.acceleration.mul(0);\n    }\n}","import { Community, EcdsaKey, ChainTree, CID, CommunityMessenger, setDataTransaction } from \"tupelo-wasm-sdk\";\nimport { Envelope } from \"tupelo-messages\";\nimport { messageType, didRegistration, deserialize, serialize } from \"../messages\";\nimport { EventEmitter } from \"events\";\nimport { certificationTopic } from '../messages'\nimport { SimpleSyncher } from \"../util/actor\";\nimport {emittingLogger} from '../util/emittinglogger';\n\nconst log = emittingLogger(\"decentracar:company\")\n\ninterface IDecentraCarServiceOptions {\n    community: Community\n    key: EcdsaKey\n    did: string\n}\n\n/**\n * The DecentraCarService listens to the certification topic and certifies that a rider/driver is actually\n * part of the community. This is a demo so it just auto certifies anyone that asks, but in a realworld situation\n * this would be an offline process that verifies identity, etc.\n */\nexport class DecentraCarService extends EventEmitter {\n    community: Community\n    key: EcdsaKey\n    tree?: ChainTree\n    private did: string\n    private messenger?: CommunityMessenger\n    private syncher: SimpleSyncher\n\n    constructor(opts: IDecentraCarServiceOptions) {\n        super()\n        this.community = opts.community\n        this.key = opts.key\n        this.did = opts.did\n        this.syncher = new SimpleSyncher(\"company: \")\n    }\n\n    async start() {\n        await this._findOrCreateTree()\n        this.messenger = new CommunityMessenger(\"integrationtest\", 32, this.key, (await this.id()), this.community.node.pubsub)\n        return this.messenger.subscribe(certificationTopic, this.handleRegistration.bind(this))\n    }\n\n    private async handleRegistration(env: Envelope) {\n        if (this.tree === undefined || this.messenger === undefined) {\n            throw new Error(\"handling a message on a service without a tree or messenger\")\n        }\n        const msg: didRegistration = deserialize(env.getPayload_asU8())\n        const did = msg.did\n\n        let tryCount = 0\n\n        const getTip = async ()=> {\n            let tip\n\n            try {\n                tip = await this.community.getTip(did)\n            } catch (err) {\n                if (tryCount < 10 && err === 'not found') {\n                    tryCount++\n                    setTimeout(getTip, 1000)\n                    return\n                }\n                log(err, \"/ no tip found for \", did)\n                return\n            }\n            this.handleNew(tip, msg)\n        }\n        getTip()\n    }\n\n    private async handleNew(tip:any, msg:didRegistration) {\n        if (this.tree === undefined || this.messenger === undefined) {\n            throw new Error(\"handling a message on a service without a tree or messenger\")\n        }\n        \n        const did = msg.did\n        let tree = new ChainTree({\n            tip: new CID(tip),\n            store: this.community.blockservice,\n        })\n        let type = await tree.resolve(\"/tree/data/_decentracar/type\".split(\"/\"))\n        switch (type.value as string) {\n            case \"rider\":\n                await this.syncher.send(() => {\n                    if (this.tree === undefined) {\n                        throw new Error(\"tree must be defined\")\n                    }\n                    return this.community.playTransactions(this.tree, [setDataTransaction(\"/_decentracar/validatedriders/\" + did, true)])\n                })\n                log(\"registered new rider: \", did)\n                this.messenger.publish(did, serialize({ type: messageType.didRegistration, did: did } as didRegistration))\n                this.emit('rider', did)\n                break;\n            case \"driver\":\n                await this.syncher.send(async () => {\n                    if (this.tree === undefined) {\n                        throw new Error(\"tree must be defined\")\n                    }\n                    await this.community.playTransactions(this.tree, [setDataTransaction(\"/_decentracar/validateddrivers/\" + did, true)])\n                    return\n                })\n                log(\"registered new driver: \", did)\n                this.messenger.publish(did, serialize({ type: messageType.didRegistration, did: did } as didRegistration))\n                this.emit('driver', did)\n                break;\n            default:\n                log(\"unknown message type: \", type.value)\n        }\n    }\n\n    private async id(): Promise<Uint8Array> {\n        if (this.tree === undefined) {\n            throw new Error(\"no tree\")\n        }\n        const id = await this.tree.id()\n        if (id === null) {\n            throw new Error(\"no id\")\n        }\n        return Buffer.from(id, 'utf8')\n    }\n\n    private async _findOrCreateTree() {\n        let tip\n        try {\n            tip = await this.community.getTip(this.did)\n        } catch (e) {\n            if (e === \"not found\") {\n                // do nothing\n            }\n        }\n        if (CID.isCID(tip)) {\n            this.tree = new ChainTree({\n                key: this.key,\n                tip: tip,\n                store: this.community.blockservice,\n            })\n        } else {\n            this.tree = await ChainTree.newEmptyTree(this.community.blockservice, this.key)\n        }\n    }\n\n}","import { Community, ChainTree, EcdsaKey, CommunityMessenger, setDataTransaction } from \"tupelo-wasm-sdk\";\nimport Vector from \"../util/vector\";\nimport { EventEmitter } from \"events\";\nimport faker from 'faker';\nimport { ridersTopic, certificationTopic, messageType, offer, riding, deserialize, serialize, didRegistration, offerReject, offerAccept, rideRequest, dcMessage } from \"../messages\";\nimport { Envelope } from \"tupelo-messages\";\nimport { SimpleSyncher } from \"../util/actor\";\nimport { randomGeo } from \"../util/locations\";\nimport {emittingLogger} from \"../util/emittinglogger\";\n\nconst log = emittingLogger('decentracar:rider')\n\n\ninterface IRiderOpts {\n    community: Promise<Community>\n    location: Vector\n}\n\nexport class Rider extends EventEmitter {\n    community: Promise<Community>\n    tree?: ChainTree\n    key?: EcdsaKey\n    id?: string\n    name: string\n    location: Vector\n    destination: Vector\n    registered: boolean\n    tickCount: number\n    stopped:boolean\n\n    acceptedDriver?: string // a DID\n\n    private startPromise?: Promise<Rider>\n    private messenger?: CommunityMessenger\n    private syncher:SimpleSyncher\n    private offers:offer[]\n    private subFn:Function\n    private firstOfferTick:number\n\n    constructor(opts: IRiderOpts) {\n        super();\n        this.community = opts.community;\n        this.location = opts.location;\n        this.destination = randomGeo(this.location, 10000) // anywhere within a 10km radius\n        this.name = faker.name.findName();\n        this.registered = false;\n        this.syncher = new SimpleSyncher();\n        this.offers = []\n        this.handleSelfMessages = this.handleSelfMessages.bind(this)\n        this.subFn = ()=>{}\n        this.tickCount = 0\n        this.firstOfferTick = 0\n        this.stopped = false\n    }\n\n    start() {\n        if (this.startPromise !== undefined) {\n            return this.startPromise\n        }\n        this.startPromise = new Promise(async (resolve, reject) => {\n            const community = await this.community\n            this.key = await EcdsaKey.generate()\n            this.tree = await ChainTree.newEmptyTree(community.blockservice, this.key)\n            const id = await this.tree.id()\n            if (id === null) {\n                reject(new Error(\"error getting id\"))\n                return\n            }\n            this.id = id\n            this.messenger = new CommunityMessenger(\"integrationtest\", 32, this.key, Buffer.from(this.id, 'utf8'), community.node.pubsub)\n            this.messenger.subscribe(this.id, this.handleSelfMessages)\n            await this.registerAsRider()\n            resolve(this)\n        })\n        return this.startPromise\n    }\n\n    stop() {\n        log(this.name, \" dropped off\")\n        if (this.messenger !== undefined && this.id !== undefined) {\n            this.messenger.unsubscribe(this.id, this.handleSelfMessages)\n        }\n        this.emit('stopped')\n        this.stopped = true\n    }\n\n    async registerAsRider() {\n        log(this.name, \" registering\")\n        if (this.messenger === undefined || this.tree === undefined) {\n            throw new Error(\"need a tree and messenger to registerAsDriver\")\n        }\n        const c = await this.community\n        await this.syncher.send(()=> {\n            if (this.tree === undefined) {\n                throw new Error(\"undefined tree\")\n            }\n            log(this.name, \" set type to rider\")\n            return c.playTransactions(this.tree, [setDataTransaction(\"_decentracar/type\", \"rider\")])\n        })\n        await c.nextUpdate()\n        log(this.name, \" publishing did registration\")\n        this.messenger.publish(certificationTopic, serialize({\n            type: messageType.didRegistration,\n            did: this.id,\n        } as didRegistration))\n    }\n\n    // the drivers should send messages directly here\n    async handleSelfMessages(env: Envelope) {\n        const msg: dcMessage = deserialize(env.getPayload_asU8())\n        switch (msg.type) {\n            case messageType.didRegistration:\n                this.registered = true // for now, for real we'd have to check this\n                log(this.name, \" registered\")\n                this.askForRide()\n                break;\n            case messageType.offer:\n                this.possiblyAcceptRide(msg as offer)\n                break;\n            case messageType.riding:\n                const typedMsg = msg as riding\n                this.location = new Vector(typedMsg.location[0], typedMsg.location[1])\n                break;\n            case messageType.dropoff:\n                this.stop()\n                break;\n        }\n    }\n\n    possiblyAcceptRide(msg: offer) {\n        if (this.acceptedDriver !== undefined) {\n            this.rejectRide(msg)\n            return\n        }\n\n        this.offers.push(msg)\n\n        if (this.offers.length === 1) {\n            // after the first offer, we'll wait a tick and then calculate which rider to accept\n            this.once('tick', ()=> {\n                let closest:offer|undefined = undefined\n                let closestDist:number = -1\n                for (let offer of this.offers) {\n                    let d = this.location.dist(new Vector(offer.driverLocation[0], offer.driverLocation[1]))\n                    if (closestDist === -1 || d < closestDist) {\n                        closest = offer\n                        closestDist = d\n                    }\n                }\n\n                if (closest === undefined) {\n                    throw new Error(\"no closest offer, this state should never happen, but in the loop\")\n                }\n\n                // otherwise accept this driver\n                this.acceptRide(closest)\n            })\n        }\n    }\n\n    async rejectRide(rideOffer:offer) {\n        if (this.messenger === undefined) {\n            throw new Error(\"must have a messenger and an id\")\n        }\n        // log(this.name, \" rejecting rider \", rideOffer.driverDid)\n        this.messenger.publish(rideOffer.driverDid, serialize({\n            type: messageType.offerReject,\n            offer: rideOffer,\n        } as offerReject))\n    }\n\n    async acceptRide(msg:offer) {\n        if (this.messenger === undefined || this.id == null) {\n            throw new Error(\"must have a messenger and an id\")\n        }\n        log(this.name, \" acceppting ride from: \", msg.driverDid)\n        // TODO: there should be a lot more rules and validation here :)\n        this.acceptedDriver = msg.driverDid\n        const c = await this.community\n        await this.syncher.send(() => {\n            if (this.tree === undefined) {\n                throw new Error(\"undefined tree\")\n            }\n            return c.playTransactions(this.tree, [setDataTransaction(\"/_decentracar/accepted\", msg.driverDid)])\n        })\n        this.messenger.publish(msg.driverDid, serialize({\n            type: messageType.offerAccept,\n            riderDid: this.id,\n            location: [this.location.x, this.location.y],\n            destination: [this.destination.x, this.destination.y]\n        } as offerAccept))\n        \n        for (let offer of this.offers) {\n            if (offer !== msg) {\n                this.rejectRide(offer)\n            }\n        }\n        this.offers = []\n    }\n\n    tick() {\n        this.tickCount++\n        this.emit('tick', this.tickCount)\n    }\n\n    async askForRide() {\n        if (this.messenger === undefined || this.id == null) {\n            throw new Error(\"must have a messenger and an id\")\n        }\n        log(this.name, \" asking for ride\")\n\n        this.messenger.publish(ridersTopic, serialize({\n            type: messageType.rideRequest,\n            riderDID: this.id,\n            location: [this.location.x, this.location.y]\n        } as rideRequest))\n    }\n}","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 521;","export class Vector {\n    x:number\n    y:number\n    constructor(x:number,y:number) {\n        this.x = x;\n        this.y = y;\n    }\n\n  set(x:number, y:number)\n\t{\n\t\tthis.x = x;\n\t\tthis.y = y;\n\n        return this;\n        \n    }\n    \n  add(v:Vector)\n\t{\n\t\tthis.x += v.x;\n\t\tthis.y += v.y;\n\n\t\treturn this;\n    }\n    \n  sub(v:Vector)\n\t{\n\t\tthis.x -= v.x;\n\t\tthis.y -= v.y;\n\n\t\treturn this;\n    }\n    \n  mul(s:number)\n\t{\n\t\tthis.x *= s;\n\t\tthis.y *= s;\n\n\t\treturn this;\n    }\n    \n  div(s:number)\n\t{\n\t\t!s && console.log(\"Division by zero!\");\n\n\t\tthis.x /= s;\n\t\tthis.y /= s;\n\n\t\treturn this;\n    }\n    \n  mag(){\n\t\treturn Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n    \n  normalize()\n\t{\n\t\tvar mag = this.mag();\n\t\tmag && this.div(mag);\n\t\treturn this;\n    }\n    \n  angle()\n\t{\n\t\treturn Math.atan2(this.y, this.x);\n    }\n    \n  setMag(m:number)\n\t{\n\t\tvar angle = this.angle();\n\t\tthis.x = m * Math.cos(angle);\n\t\tthis.y = m * Math.sin(angle);\n\t\treturn this;\n    }\n    \n  setAngle(a:number)\n\t{\n\t\tvar mag = this.mag();\n\t\tthis.x = mag * Math.cos(a);\n\t\tthis.y = mag * Math.sin(a);\n\t\treturn this;\n    }\n    \n  rotate(a:number)\n\t{\n\t\tthis.setAngle(this.angle() + a);\n\t\treturn this;\n    }\n    \n  limit(l:number)\n\t{\n\t\tvar mag = this.mag();\n\t\tif(mag > l)\n\t\t\tthis.setMag(l);\n\t\treturn this;\n    }\n    \n  angleBetween(v:Vector)\n\t{\n\t\treturn this.angle() - v.angle();\n    }\n    \n  dot(v:Vector)\n\t{\n\t\treturn this.x * v.x + this.y * v.y;\n    }\n    \n  lerp(v:Vector, amt:number)\n\t{\n\t\tthis.x += (v.x - this.x) * amt;\n\t\tthis.y += (v.y - this.y) * amt;\n\t\treturn this;\n    }\n    \n  dist(v:Vector)\n\t{\n\t\tvar dx = this.x - v.x;\n\t\tvar dy = this.y - v.y;\n\t\treturn Math.sqrt(dx * dx + dy * dy);\n    }\n    \n  copy()\n\t{\n\t\treturn new Vector(this.x, this.y);\n\t}\n}\n\n\nexport default Vector","import debug from 'debug'\nimport { EventEmitter } from 'events'\n\nexport const logs = new EventEmitter()\n\nclass EmittingLogger {\n    private debugger:Function\n    private name:string\n\n    constructor(name:string) {\n        this.name = name\n        this.debugger = debug(name)\n        this.log = this.log.bind(this)\n    }\n\n    log(...args: any[]) {\n        logs.emit(this.name, ...args)\n        this.debugger(...args)\n    }\n    \n}\n\nexport function emittingLogger(name:string):Function {\n    return new EmittingLogger(name).log\n}","import Vector from './vector'\n\n// lon/Lat (not lat,long) maps to x,y\nexport const mapCenter = new Vector(13.362029, 52.491362) // Berlin longitude,latitude\n\nexport const maxLat = 53.4\nexport const minLat = 51.5\nexport const maxLong = 14.3\nexport const minLong = 12.4\n\n// see https://stackoverflow.com/questions/31192451/generate-random-geo-coordinates-within-specific-radius-from-seed-point\nexport function randomGeo(center:Vector, radius:number):Vector {\n    var y0 = center.y;\n    var x0 = center.x;\n    var rd = radius / 111300;\n\n    var u = Math.random();\n    var v = Math.random();\n\n    var w = rd * Math.sqrt(u);\n    var t = 2 * Math.PI * v;\n    var x = w * Math.cos(t);\n    var y = w * Math.sin(t);\n\n    return new Vector(x+x0, y+y0)\n}\n\n// see https://stackoverflow.com/questions/31192451/generate-random-geo-coordinates-within-specific-radius-from-seed-point\nexport function distance(lat1:number, lon1:number, lat2:number, lon2:number) {\n    var R = 6371000;\n    var a = 0.5 - Math.cos((lat2 - lat1) * Math.PI / 180) / 2 + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * (1 - Math.cos((lon2 - lon1) * Math.PI / 180)) / 2;\n    return R * 2 * Math.asin(Math.sqrt(a));\n}\n"],"sourceRoot":""}